{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","Keypair","keyPairArray","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programId","PublicKey","idl","metadata","address","network","clusterApiUrl","options","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","useEffect","onLoad","a","CheckIfUserHasSolanaWalletInstalled","window","addEventListener","removeEventListener","getGifList","provider","getProvider","program","Program","account","fetch","publicKey","console","log","solana","alert","isPhantom","connect","onlyIfTrusted","response","toString","error","connectWallet","onInputChange","e","value","target","onFormSubmit","preventDefault","sendGif","connection","Connection","Provider","getProgram","length","rpc","addGif","accounts","user","wallet","createGifAccount","startStuffOff","systemProgram","signers","className","onClick","onSubmit","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.861c2063.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\n\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst keyPairArray = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(keyPairArray);\nconst baseAccount = Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programId = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst options = { preflightCommitment: \"processed\" };\n\n// App Constants\nconst TWITTER_HANDLE = \"najsgg\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  useEffect(() => {\n    const onLoad = async () => await CheckIfUserHasSolanaWalletInstalled();\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  });\n\n  useEffect(() => {\n    if (walletAddress) {\n      getGifList();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletAddress]);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programId, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Account: \", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const CheckIfUserHasSolanaWalletInstalled = async () => {\n    try {\n      // Solana object is automatically injected into window if Phantom is installed.\n      const { solana } = window;\n\n      if (!solana) {\n        alert(\n          \"Solana wallet not found. Please install the Phantom Solana wallet!\"\n        );\n        return;\n      }\n\n      if (solana.isPhantom) {\n        // Phantom popup -> connect\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log(response);\n        const publicKey = response.publicKey.toString();\n        console.log(\"Connected with public key: \", publicKey);\n\n        setWalletAddress(publicKey);\n      } else {\n        console.log(\"Wallet found - Not Phantom..\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    // Phantom popup -> connect\n    const response = await solana.connect();\n    console.log(response);\n    const publicKey = response.publicKey.toString();\n    console.log(\"Connected with public key: \", publicKey);\n\n    setWalletAddress(publicKey);\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChange = (e) => {\n    const { value } = e.target;\n    setInputValue(value);\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    sendGif();\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, options.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      options.preflightCommitment\n    );\n\n    return provider;\n  };\n\n  const getProgram = (provider) => new Program(idl, programId, provider);\n\n  const sendGif = async () => {\n    if (inputValue.length <= 0) {\n      console.log(\"No GIF link ...\");\n      return;\n    }\n\n    console.log(\"Gif link: \", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      console.log(\"GIF successfully submitted to program.\");\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\");\n      console.log(error);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = getProgram(provider);\n      console.log(\"ping createGifAccount\");\n\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n\n      console.log(\n        \"Created new BaseAccount with address: \",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\");\n      console.log(error);\n    }\n  };\n\n  const renderCreateGifAccountContainer = () => (\n    <div className=\"connected-container\">\n      <button\n        className=\"cta-button submit-gif-button\"\n        onClick={createGifAccount}\n      >\n        Create One-Click GIF Account!\n      </button>\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return renderCreateGifAccountContainer();\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form onSubmit={onFormSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList &&\n              gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} alt={\"Some GIF uploaded by user\"} />\n                </div>\n              ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 giphyverse</p>\n          <p className=\"sub-text\">View your collection in the giphyverse ✨</p>\n          {walletAddress\n            ? renderConnectedContainer()\n            : renderNotConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}